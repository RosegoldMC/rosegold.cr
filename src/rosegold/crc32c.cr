# CRC32C implementation to match Minecraft's hashedslot hashing
module Rosegold::CRC32C
  # CRC32C polynomial (Castagnoli)
  CRC32C_TABLE = [
    0x00000000_u32, 0xf26b8303_u32, 0xe13b70f7_u32, 0x1350f3f4_u32, 0xc79a971f_u32, 0x35f1141c_u32, 0x26a1e7e8_u32, 0xd4ca64eb_u32,
    0x8ad958cf_u32, 0x78b2dbcc_u32, 0x6be22838_u32, 0x9989ab3b_u32, 0x4d43cfd0_u32, 0xbf284cd3_u32, 0xac78bf27_u32, 0x5e133c24_u32,
    0x105ec76f_u32, 0xe235446c_u32, 0xf165b798_u32, 0x030e349b_u32, 0xd7c45070_u32, 0x25afd373_u32, 0x36ff2087_u32, 0xc494a384_u32,
    0x9a879fa0_u32, 0x68ec1ca3_u32, 0x7bbcef57_u32, 0x89d76c54_u32, 0x5d1d08bf_u32, 0xaf768bbc_u32, 0xbc267848_u32, 0x4e4dfb4b_u32,
    0x20bd8ede_u32, 0xd2d60ddd_u32, 0xc186fe29_u32, 0x33ed7d2a_u32, 0xe72719c1_u32, 0x154c9ac2_u32, 0x061c6936_u32, 0xf477ea35_u32,
    0xaa64d611_u32, 0x580f5512_u32, 0x4b5fa6e6_u32, 0xb93425e5_u32, 0x6dfe410e_u32, 0x9f95c20d_u32, 0x8cc531f9_u32, 0x7eaeb2fa_u32,
    0x30e349b1_u32, 0xc288cab2_u32, 0xd1d83946_u32, 0x23b3ba45_u32, 0xf779deae_u32, 0x05125dad_u32, 0x1642ae59_u32, 0xe4292d5a_u32,
    0xba3a117e_u32, 0x4851927d_u32, 0x5b016189_u32, 0xa96ae28a_u32, 0x7da08661_u32, 0x8fcb0562_u32, 0x9c9bf696_u32, 0x6ef07595_u32,
    0x417b1dbc_u32, 0xb3109ebf_u32, 0xa0406d4b_u32, 0x522bee48_u32, 0x86e18aa3_u32, 0x748a09a0_u32, 0x67dafa54_u32, 0x95b17957_u32,
    0xcba24573_u32, 0x39c9c670_u32, 0x2a993584_u32, 0xd8f2b687_u32, 0x0c38d26c_u32, 0xfe53516f_u32, 0xed03a29b_u32, 0x1f682198_u32,
    0x5125dad3_u32, 0xa34e59d0_u32, 0xb01eaa24_u32, 0x42752927_u32, 0x96bf4dcc_u32, 0x64d4cecf_u32, 0x77843d3b_u32, 0x85efbe38_u32,
    0xdbfc821c_u32, 0x2997011f_u32, 0x3ac7f2eb_u32, 0xc8ac71e8_u32, 0x1c661503_u32, 0xee0d9600_u32, 0xfd5d65f4_u32, 0x0f36e6f7_u32,
    0x61c69362_u32, 0x93ad1061_u32, 0x80fde395_u32, 0x72966096_u32, 0xa65c047d_u32, 0x5437877e_u32, 0x4767748a_u32, 0xb50cf789_u32,
    0xeb1fcbad_u32, 0x197448ae_u32, 0x0a24bb5a_u32, 0xf84f3859_u32, 0x2c855cb2_u32, 0xdeeedfb1_u32, 0xcdbe2c45_u32, 0x3fd5af46_u32,
    0x7198540d_u32, 0x83f3d70e_u32, 0x90a324fa_u32, 0x62c8a7f9_u32, 0xb602c312_u32, 0x44694011_u32, 0x5739b3e5_u32, 0xa55230e6_u32,
    0xfb410cc2_u32, 0x092a8fc1_u32, 0x1a7a7c35_u32, 0xe811ff36_u32, 0x3cdb9bdd_u32, 0xceb018de_u32, 0xdde0eb2a_u32, 0x2f8b6829_u32,
    0x82f63b78_u32, 0x709db87b_u32, 0x63cd4b8f_u32, 0x91a6c88c_u32, 0x456cac67_u32, 0xb7072f64_u32, 0xa457dc90_u32, 0x563c5f93_u32,
    0x082f63b7_u32, 0xfa44e0b4_u32, 0xe9141340_u32, 0x1b7f9043_u32, 0xcfb5f4a8_u32, 0x3dde77ab_u32, 0x2e8e845f_u32, 0xdce5075c_u32,
    0x92a8fc17_u32, 0x60c37f14_u32, 0x73938ce0_u32, 0x81f80fe3_u32, 0x55326b08_u32, 0xa759e80b_u32, 0xb4091bff_u32, 0x466298fc_u32,
    0x1871a4d8_u32, 0xea1a27db_u32, 0xf94ad42f_u32, 0x0b21572c_u32, 0xdfeb33c7_u32, 0x2d80b0c4_u32, 0x3ed04330_u32, 0xccbbc033_u32,
    0xa24bb5a6_u32, 0x502036a5_u32, 0x4370c551_u32, 0xb11b4652_u32, 0x65d122b9_u32, 0x97baa1ba_u32, 0x84ea524e_u32, 0x7681d14d_u32,
    0x2892ed69_u32, 0xdaf96e6a_u32, 0xc9a99d9e_u32, 0x3bc21e9d_u32, 0xef087a76_u32, 0x1d63f975_u32, 0x0e330a81_u32, 0xfc588982_u32,
    0xb21572c9_u32, 0x407ef1ca_u32, 0x532e023e_u32, 0xa145813d_u32, 0x758fe5d6_u32, 0x87e466d5_u32, 0x94b49521_u32, 0x66df1622_u32,
    0x38cc2a06_u32, 0xcaa7a905_u32, 0xd9f75af1_u32, 0x2b9cd9f2_u32, 0xff56bd19_u32, 0x0d3d3e1a_u32, 0x1e6dcdee_u32, 0xec064eed_u32,
    0xc38d26c4_u32, 0x31e6a5c7_u32, 0x22b65633_u32, 0xd0ddd530_u32, 0x0417b1db_u32, 0xf67c32d8_u32, 0xe52cc12c_u32, 0x1747422f_u32,
    0x49547e0b_u32, 0xbb3ffd08_u32, 0xa86f0efc_u32, 0x5a048dff_u32, 0x8ecee914_u32, 0x7ca56a17_u32, 0x6ff599e3_u32, 0x9d9e1ae0_u32,
    0xd3d3e1ab_u32, 0x21b862a8_u32, 0x32e8915c_u32, 0xc083125f_u32, 0x144976b4_u32, 0xe622f5b7_u32, 0xf5720643_u32, 0x07198540_u32,
    0x590ab964_u32, 0xab613a67_u32, 0xb831c993_u32, 0x4a5a4a90_u32, 0x9e902e7b_u32, 0x6cfbad78_u32, 0x7fab5e8c_u32, 0x8dc0dd8f_u32,
    0xe330a81a_u32, 0x115b2b19_u32, 0x020bd8ed_u32, 0xf0605bee_u32, 0x24aa3f05_u32, 0xd6c1bc06_u32, 0xc5914ff2_u32, 0x37faccf1_u32,
    0x69e9f0d5_u32, 0x9b8273d6_u32, 0x88d28022_u32, 0x7ab90321_u32, 0xae7367ca_u32, 0x5c18e4c9_u32, 0x4f48173d_u32, 0xbd23943e_u32,
    0xf36e6f75_u32, 0x0105ec76_u32, 0x12551f82_u32, 0xe03e9c81_u32, 0x34f4f86a_u32, 0xc69f7b69_u32, 0xd5cf889d_u32, 0x27a40b9e_u32,
    0x79b737ba_u32, 0x8bdcb4b9_u32, 0x988c474d_u32, 0x6ae7c44e_u32, 0xbe2da0a5_u32, 0x4c4623a6_u32, 0x5f16d052_u32, 0xad7d5351_u32
  ]

  def self.checksum(data : Bytes) : UInt32
    crc = ~0_u32
    data.each do |byte|
      index = (crc ^ byte) & 0xFF
      crc = (crc >> 8) ^ CRC32C_TABLE[index]
    end
    ~crc
  end
end